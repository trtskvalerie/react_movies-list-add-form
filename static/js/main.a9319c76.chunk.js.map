{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","urlRegex","RegExp","NewMovie","onAdd","useState","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","isInvalid","setIsInvalid","isDirty","setIsDirty","submitIsDisabled","Object","values","some","value","validateField","event","field","target","name","input","match","onSubmit","preventDefault","newMovie","type","id","placeholder","onBlur","onChange","disabled","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a9319c76.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\n\nimport './NewMovie.scss';\n\ntype Props = {\n  onAdd: (movie: Movie) => void,\n};\n\ntype Errors = {\n  title: boolean,\n  imgUrl: boolean,\n  imdbUrl: boolean,\n  imdbId: boolean,\n};\n\nconst urlRegex = new RegExp(/^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w_-]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/);\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  const [isInvalid, setIsInvalid] = useState({\n    title: true,\n    imgUrl: true,\n    imdbUrl: true,\n    imdbId: true,\n  });\n\n  const [isDirty, setIsDirty] = useState({\n    title: false,\n    imgUrl: false,\n    imdbUrl: false,\n    imdbId: false,\n  });\n\n  const submitIsDisabled = Object.values(isInvalid).some(value => value);\n\n  const validateField = (event: React.FocusEvent<HTMLInputElement>) => {\n    const field = event.target.name as keyof Errors;\n    const input = event.target.value;\n\n    if (!isDirty[field]) {\n      setIsDirty({\n        ...isDirty,\n        [field]: true,\n      });\n    }\n\n    switch (field) {\n      case 'imgUrl':\n      case 'imdbUrl':\n        if (!input.match(urlRegex)) {\n          setIsInvalid({\n            ...isInvalid,\n            [field]: true,\n          });\n        }\n\n        break;\n\n      default:\n        if (!input) {\n          setIsInvalid({\n            ...isInvalid,\n            [field]: true,\n          });\n        }\n    }\n  };\n\n  const resetForm = () => {\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n\n    setIsInvalid({\n      title: true,\n      imgUrl: true,\n      imdbUrl: true,\n      imdbId: true,\n    });\n\n    setIsDirty({\n      title: false,\n      imgUrl: false,\n      imdbUrl: false,\n      imdbId: false,\n    });\n  };\n\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const newMovie = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    resetForm();\n    onAdd(newMovie);\n  };\n\n  return (\n    <form\n      className=\"add-movie\"\n      onSubmit={onSubmit}\n    >\n      <div>\n        <input\n          type=\"text\"\n          id=\"title\"\n          name=\"title\"\n          value={title}\n          placeholder=\"Title\"\n          onBlur={validateField}\n          onChange={(event) => {\n            setIsInvalid({ ...isInvalid, title: false });\n            setTitle(event.target.value);\n          }}\n        />\n        {isDirty.title && isInvalid.title && <p className=\"add-movie__error\">Please enter a title</p>}\n      </div>\n\n      <div>\n        <input\n          type=\"text\"\n          id=\"description\"\n          name=\"description\"\n          value={description}\n          placeholder=\"Description\"\n          onChange={(event) => setDescription(event.target.value)}\n        />\n      </div>\n\n      <div>\n        <input\n          type=\"text\"\n          id=\"imgUrl\"\n          name=\"imgUrl\"\n          value={imgUrl}\n          placeholder=\"Image URL\"\n          onBlur={validateField}\n          onChange={(event) => {\n            setIsInvalid({ ...isInvalid, imgUrl: false });\n            setImgUrl(event.target.value);\n          }}\n        />\n        {isDirty.imgUrl && isInvalid.imgUrl && <p className=\"add-movie__error\">Please enter a valid URL</p>}\n      </div>\n\n      <div>\n        <input\n          type=\"text\"\n          id=\"imdbUrl\"\n          name=\"imdbUrl\"\n          value={imdbUrl}\n          placeholder=\"IMDB URL\"\n          onBlur={validateField}\n          onChange={(event) => {\n            setIsInvalid({ ...isInvalid, imdbUrl: false });\n            setImdbUrl(event.target.value);\n          }}\n        />\n        {isDirty.imdbUrl && isInvalid.imdbUrl && <p className=\"add-movie__error\">Please enter a valid URL</p>}\n      </div>\n\n      <div>\n        <input\n          type=\"text\"\n          id=\"imdbId\"\n          name=\"imdbId\"\n          value={imdbId}\n          placeholder=\"IMDB ID\"\n          onBlur={validateField}\n          onChange={(event) => {\n            setIsInvalid({ ...isInvalid, imdbId: false });\n            setImdbId(event.target.value);\n          }}\n        />\n        {isDirty.imdbId && isInvalid.imdbId && <p className=\"add-movie__error\">Please enter an IMDB ID</p>}\n      </div>\n\n      <button\n        type=\"submit\"\n        disabled={submitIsDisabled}\n      >\n        Add movie\n      </button>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nimport './App.scss';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState([...moviesFromServer]);\n\n  const addMovie = (movie: Movie) => {\n    setMovies([...movies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <h1 className=\"sidebar__title\">Add movie</h1>\n        <NewMovie\n          onAdd={addMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}